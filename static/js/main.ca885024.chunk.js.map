{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","getNumberOfPages","Math","ceil","arrayOfPages","onChangePageBtn","page","mod","className","classNames","disabled","href","onClick","map","active","App","useState","setCurrentPage","setPerPage","toMax","items","changePage","useEffect","value","onChange","event","target","setItemsPerPage","id","htmlFor","el","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAmBC,KAAKC,KAAKN,EAAQC,GACrCM,EAAed,EAAW,EAAGW,GAE7BI,EAAkB,SAACC,EAAcC,GACrC,OAAQA,GACN,IAAK,OAKH,YAJID,IAASL,GACXD,EAAaM,EAAO,IAIxB,IAAK,OACU,IAATA,GACFN,EAAaM,EAAO,KAQ5B,OACE,qBAAIE,UAAU,aAAd,UACE,oBAAIA,UACFC,IAAW,YAAa,CAAEC,SAA0B,IAAhBX,IADtC,SAIE,mBACE,UAAQ,WACRS,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBZ,EACfa,QAAS,kBAAMP,EAAgBN,EAAa,SAL9C,oBAUDK,EAAaS,KAAI,SAAAP,GAAI,OACpB,oBAEEE,UACEC,IACE,YACA,CACEK,OAAQf,IAAgBO,IANhC,SAWE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAI,WAAML,GACVM,QAAS,kBAAMZ,EAAaM,IAJ9B,SAMGA,KAhBEA,MAoBT,oBAAIE,UACFC,IACE,YACA,CAAEC,SAAUX,IAAgBE,IAHhC,SAOE,mBACE,UAAQ,WACRO,UAAU,YACVG,KAAK,QACL,gBAAeZ,IAAgBE,EAC/BW,QAAS,kBAAMP,EAAgBN,EAAa,SAL9C,wBC3EKgB,EAAgB,WAC3B,MAAsCC,mBAAiB,GAAvD,mBAAOjB,EAAP,KAAoBkB,EAApB,KACA,EAA8BD,mBAAiB,GAA/C,mBAAOlB,EAAP,KAAgBoB,EAAhB,KACMC,EAAQrB,EAAUC,EAClBP,EAAK2B,EANI,GAMeA,EANf,GAOT5B,GAAQQ,EAAc,GAAKD,EAAU,EACrCsB,EAAQ9B,EAAWC,EAAMC,GAAIqB,KAAI,SAAAnB,GAAC,qBAAYA,MAQ9C2B,EAAa,SAACf,GACdA,IAASP,GAIbkB,EAAeX,IAOjB,OAJAgB,qBAAU,WACRD,EAAW,KACV,CAACvB,IAGF,sBAAKU,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWT,EADX,mBACiCR,EADjC,cAC2CC,EAD3C,eAhCW,GAgCX,OAIA,sBAAKgB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRe,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OA/BI,SAACA,GACvB,IAAQF,EAAUE,EAAMC,OAAhBH,MAERL,GAAYK,GA4BiBI,CAAgBF,IACrCG,GAAG,kBACHpB,UAAU,eALZ,UAOE,wBAAQe,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOM,QAAQ,kBAAkBrB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEX,MA1DS,GA2DTC,QAASA,EACTC,YAAaA,EACbC,aAAcqB,IAGhB,6BACGD,EAAMP,KAAI,SAACiB,GAAD,OACT,oBAAI,UAAQ,OAAZ,mBAAgCA,IAARA,YCpElCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ca885024.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page:number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const getNumberOfPages = Math.ceil(total / perPage);\n  const arrayOfPages = getNumbers(1, getNumberOfPages);\n\n  const onChangePageBtn = (page: number, mod: 'next' | 'prev') => {\n    switch (mod) {\n      case 'next':\n        if (page !== getNumberOfPages) {\n          onPageChange(page + 1);\n        }\n\n        return;\n      case 'prev':\n        if (page !== 1) {\n          onPageChange(page - 1);\n        }\n\n        break;\n      default:\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={\n        classNames('page-item', { disabled: currentPage === 1 })\n      }\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={() => onChangePageBtn(currentPage, 'prev')}\n        >\n          «\n        </a>\n      </li>\n      {arrayOfPages.map(page => (\n        <li\n          key={page}\n          className={\n            classNames(\n              'page-item',\n              {\n                active: currentPage === page,\n              },\n            )\n          }\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li className={\n        classNames(\n          'page-item',\n          { disabled: currentPage === getNumberOfPages },\n        )\n      }\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === getNumberOfPages}\n          onClick={() => onChangePageBtn(currentPage, 'next')}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst maxItems = 42;\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(5);\n  const toMax = perPage * currentPage;\n  const to = toMax < maxItems ? toMax : maxItems;\n  const from = (currentPage - 1) * perPage + 1;\n  const items = getNumbers(from, to).map(n => `Item ${n}`);\n\n  const setItemsPerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setPerPage(+value);\n  };\n\n  const changePage = (page: number) => {\n    if (page === currentPage) {\n      return;\n    }\n\n    setCurrentPage(page);\n  };\n\n  useEffect(() => {\n    changePage(1);\n  }, [perPage]);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${from} - ${to} of ${maxItems})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            value={perPage}\n            onChange={(event) => setItemsPerPage(event)}\n            id=\"perPageSelector\"\n            className=\"form-control\"\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={maxItems}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={changePage}\n      />\n\n      <ul>\n        {items.map((el) => (\n          <li data-cy=\"item\" key={el}>{`${el}`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}